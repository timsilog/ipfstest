import * as Rpcs from './rpc';
export interface Log {
    removed: boolean;
    logIndex: number;
    transactionIndex: number;
    transactionHash: string;
    blockHash: string;
    blockNumber: number;
    address: string;
    data: string;
    topics: string[];
}
export interface TransactionReceipt {
    transactionHash: string;
    transactionIndex: number;
    blockHash: string;
    blockNumber: number;
    cumulativeGasUsed: number;
    gasUsed: number;
    contractAddress: string;
    logs: Log[];
    logsBloom: string;
}
export interface TransactionObject {
    hash: string;
    nonce: number;
    blockHash: string;
    blockNumber: number;
    transactionIndex: number;
    from: string;
    to: string;
    value: number;
    gasPrice: number;
    gas: number;
    input: string;
}
export interface BlockObject {
    number: number;
    hash: string;
    parentHash: string;
    nonce: string;
    sha3Uncles: string;
    logsBloom: string;
    transactionsRoot: string;
    stateRoot: string;
    receiptsRoot: string;
    miner: string;
    difficulty: number;
    totalDifficulty: number;
    extraData: string;
    size: number;
    gasLimit: number;
    gasUsed: number;
    timestamp: number;
    transactions: TransactionObject[] | string[];
    uncles: string[];
}
export interface SyncStatus {
    startingBlock: number;
    currentBlock: number;
    highestBlock: number;
}
export default class BlockchainExplorer {
    rpc: Rpcs.Rpc;
    transaction: {
        receipt: (hash: string) => Promise<TransactionObject | null>;
        byBlockAndIndex: (block: string | number, index: string | number) => Promise<TransactionObject | null>;
        byHash: (hash: string) => Promise<TransactionObject | null>;
        countByBlock: (block: string | number) => Promise<number | null>;
    };
    constructor(rpc: Rpcs.Rpc);
    block(block: string | number, hasFullTransactions: boolean): Promise<BlockObject | null>;
    blockCount(): Promise<number>;
    uncle(block: string | number, index: string | number): Promise<BlockObject>;
    uncleCount(block: string | number): Promise<number | null>;
    balanceOf(address: string, block: string | number): Promise<string | null>;
    hashRate(): Promise<string>;
    chainId(): Promise<number>;
    client(): Promise<string>;
    codeAt(address: string, block: string | number): Promise<string>;
    protocolVersion(): Promise<string>;
    sshVersion(): Promise<string>;
    transactionCount(address: string, block: string | number): Promise<number>;
    blockTransactionCount(block: string | number): Promise<number>;
    storageAt(address: string, index: string | number, block: string | number): Promise<string>;
}
