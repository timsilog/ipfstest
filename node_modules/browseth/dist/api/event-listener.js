"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fbemitter_1 = require("fbemitter");
var abi_1 = require("../abi");
var EventListener = (function () {
    function EventListener(rpc, jsonInterface, isPolling, startingBlock) {
        if (isPolling === void 0) { isPolling = false; }
        if (startingBlock === void 0) { startingBlock = 'latest'; }
        this.rpc = rpc;
        this.isPolling = isPolling;
        this.listeningFor = [];
        this.ee = new fbemitter_1.EventEmitter();
        this.abi = abi_1.createAbiCodec(jsonInterface);
        this.blockNumber = startingBlock;
    }
    EventListener.prototype.startPolling = function (interval) {
        if (interval === void 0) { interval = EventListener.pollInterval; }
        return __awaiter(this, void 0, void 0, function () {
            var done;
            var _this = this;
            return __generator(this, function (_a) {
                if (this.isPolling) {
                    return [2];
                }
                this.isPolling = true;
                done = function () {
                    var hasFinishedPolling = false;
                    var isPastTimeout = false;
                    setTimeout(function () {
                        isPastTimeout = true;
                        if (hasFinishedPolling && _this.isPolling) {
                            _this.poll(done);
                        }
                    }, interval);
                    _this.poll(function () {
                        hasFinishedPolling = true;
                        if (isPastTimeout && _this.isPolling) {
                            _this.poll(done);
                        }
                    });
                };
                this.poll(done);
                return [2];
            });
        });
    };
    EventListener.prototype.stopPolling = function () {
        if (!this.isPolling) {
            return;
        }
        this.isPolling = false;
        clearInterval(this.timer);
    };
    EventListener.prototype.removeAllListeners = function () {
        this.ee.removeAllListeners();
        this.listeningFor = [];
    };
    EventListener.prototype.addEventListener = function (address, eventName, topics, cb) {
        var _this = this;
        if (typeof this.abi.event[eventName].encode !== 'function') {
            throw new Error("event doesn't exist");
        }
        var contract = JSON.stringify({
            address: address,
            eventName: eventName,
            topics: this.abi.event[eventName].encode(topics),
        });
        this.listeningFor.push(contract);
        var subscription = this.ee.addListener(address, cb);
        return ({
            contract: contract,
            cb: cb,
            remove: function () {
                var index = _this.listeningFor.findIndex(function (i) { return i === contract; });
                if (index > -1) {
                    _this.listeningFor.splice(index, 1);
                }
                subscription.remove();
            }
        });
    };
    EventListener.prototype.getBlockNumber = function () {
        return __awaiter(this, void 0, void 0, function () {
            var latest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.rpc.send('eth_blockNumber')];
                    case 1:
                        latest = _a.sent();
                        return [2, latest];
                }
            });
        });
    };
    EventListener.prototype.poll = function (done) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, latestBlock, prep;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.listeningFor.length === 0) {
                            done();
                            return [2];
                        }
                        return [4, this.getBlockNumber()];
                    case 1:
                        latestBlock = _b.sent();
                        prep = function (contractStr) {
                            var contract = JSON.parse(contractStr);
                            return [
                                {
                                    method: 'eth_getLogs',
                                    params: [
                                        {
                                            fromBlock: _this.blockNumber,
                                            toBlock: latestBlock,
                                            address: contract.address,
                                            topics: contract.topics,
                                        },
                                    ],
                                },
                                function (err, logs) {
                                    if (!_this.isPolling) {
                                        return;
                                    }
                                    if (err) {
                                        _this.ee.emit('networkError', err);
                                    }
                                    if (logs) {
                                        _this.ee.emit(contract.address, logs);
                                    }
                                },
                            ];
                        };
                        (_a = this.rpc).batch.apply(_a, __spread([done], this.listeningFor.map(prep)));
                        this.blockNumber = latestBlock;
                        return [2];
                }
            });
        });
    };
    EventListener.pollInterval = 500;
    return EventListener;
}());
exports.default = EventListener;
