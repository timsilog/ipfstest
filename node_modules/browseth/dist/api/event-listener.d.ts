import { AbiCodec, JsonInterface } from '../abi';
import { Rpc } from '../rpc';
export interface ContractEvent {
    address: string;
    eventName: string;
    topics: any[];
}
declare class EventListener {
    rpc: Rpc;
    private isPolling;
    static pollInterval: number;
    listeningFor: string[];
    blockNumber: string;
    abi: AbiCodec;
    private ee;
    private timer;
    constructor(rpc: Rpc, jsonInterface: JsonInterface, isPolling?: boolean, startingBlock?: string);
    startPolling(interval?: number): Promise<void>;
    stopPolling(): void;
    removeAllListeners(): void;
    addEventListener(address: string, eventName: string, topics: any[], cb: (logs?: any) => void): {
        contract: string;
        cb: (logs?: any) => void;
        remove: () => void;
    };
    private getBlockNumber;
    private poll;
}
export default EventListener;
