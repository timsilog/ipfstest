"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fbemitter_1 = require("fbemitter");
var TransactionListener = (function () {
    function TransactionListener(wallet, isPolling) {
        if (isPolling === void 0) { isPolling = false; }
        this.wallet = wallet;
        this.isPolling = isPolling;
        this.listeningFor = [];
        this.ee = new fbemitter_1.EventEmitter();
        if (this.isPolling) {
            this.startPolling();
        }
    }
    TransactionListener.prototype.startPolling = function (interval) {
        var _this = this;
        if (interval === void 0) { interval = TransactionListener.pollInterval; }
        if (this.isPolling) {
            return;
        }
        this.isPolling = true;
        var done = function () {
            var hasFinishedPolling = false;
            var isPastTimeout = false;
            setTimeout(function () {
                isPastTimeout = true;
                if (hasFinishedPolling && _this.isPolling) {
                    _this.poll(done);
                }
            }, interval);
            _this.poll(function () {
                hasFinishedPolling = true;
                if (isPastTimeout && _this.isPolling) {
                    _this.poll(done);
                }
            });
        };
        this.poll(done);
    };
    TransactionListener.prototype.stopPolling = function () {
        if (!this.isPolling) {
            return;
        }
        this.isPolling = false;
        clearInterval(this.timer);
    };
    TransactionListener.prototype.removeAllListeners = function () {
        this.ee.removeAllListeners();
        this.listeningFor = [];
    };
    TransactionListener.prototype.resolveTransaction = function (transactionHash) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.addTransactionListener(transactionHash, function (receipt) {
                if (receipt.status === '0x1') {
                    resolve(receipt);
                    return;
                }
                reject(new Error('not mined'));
            });
        });
    };
    TransactionListener.prototype.addTransactionListener = function (transactionHash, cb) {
        this.listeningFor.push(transactionHash);
        var subscription = this.ee.once(transactionHash, cb);
        return subscription;
    };
    TransactionListener.prototype.poll = function (done) {
        var _this = this;
        var _a;
        if (this.listeningFor.length === 0) {
            done();
            return;
        }
        (_a = this.wallet.rpc).batch.apply(_a, __spread([done], this.listeningFor.map(function (transactionHash) {
            return [
                { method: 'eth_getTransactionReceipt', params: [transactionHash] },
                function (err, receipt) {
                    if (!_this.isPolling) {
                        return;
                    }
                    if (err) {
                        _this.ee.emit('networkError', err);
                    }
                    if (receipt) {
                        _this.ee.emit(transactionHash, receipt);
                        var transactionIndex = _this.listeningFor.indexOf(transactionHash);
                        if (transactionIndex > -1) {
                            _this.listeningFor.splice(transactionIndex, 1);
                        }
                    }
                },
            ];
        })));
    };
    TransactionListener.pollInterval = 500;
    return TransactionListener;
}());
exports.default = TransactionListener;
