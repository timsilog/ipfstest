"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var js_sha3_1 = require("js-sha3");
var contract_1 = require("../contract");
var EthRegistrar = (function () {
    function EthRegistrar(wallet, strict) {
        if (strict === void 0) { strict = false; }
        this.strict = strict;
        this._wallet = wallet;
        this.deed = new contract_1.Contract(wallet, JSON.parse('[{"constant":true,"inputs":[],"name":"creationDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"destroyDeed","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"registrar","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"value","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"previousOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newValue","type":"uint256"},{"name":"throwOnFailure","type":"bool"}],"name":"setBalance","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"refundRatio","type":"uint256"}],"name":"closeDeed","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newRegistrar","type":"address"}],"name":"setRegistrar","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_owner","type":"address"}],"payable":true,"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"newOwner","type":"address"}],"name":"OwnerChanged","type":"event"},{"anonymous":false,"inputs":[],"name":"DeedClosed","type":"event"}]'));
        this.registrar = new contract_1.Contract(wallet, JSON.parse('[{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"releaseDeed","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"getAllowedTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"unhashedName","type":"string"}],"name":"invalidateName","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"},{"name":"owner","type":"address"},{"name":"value","type":"uint256"},{"name":"salt","type":"bytes32"}],"name":"shaBid","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":false,"inputs":[{"name":"bidder","type":"address"},{"name":"seal","type":"bytes32"}],"name":"cancelBid","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"entries","outputs":[{"name":"","type":"uint8"},{"name":"","type":"address"},{"name":"","type":"uint256"},{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"ens","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"},{"name":"_value","type":"uint256"},{"name":"_salt","type":"bytes32"}],"name":"unsealBid","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"transferRegistrars","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"bytes32"}],"name":"sealedBids","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"state","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"},{"name":"newOwner","type":"address"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"},{"name":"_timestamp","type":"uint256"}],"name":"isAllowed","outputs":[{"name":"allowed","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"finalizeAuction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"registryStarted","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"launchLength","outputs":[{"name":"","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"sealedBid","type":"bytes32"}],"name":"newBid","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"labels","type":"bytes32[]"}],"name":"eraseNode","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_hashes","type":"bytes32[]"}],"name":"startAuctions","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"},{"name":"deed","type":"address"},{"name":"registrationDate","type":"uint256"}],"name":"acceptRegistrarTransfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"startAuction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"rootNode","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"hashes","type":"bytes32[]"},{"name":"sealedBid","type":"bytes32"}],"name":"startAuctionsAndBid","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"inputs":[{"name":"_ens","type":"address"},{"name":"_rootNode","type":"bytes32"},{"name":"_startDate","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"hash","type":"bytes32"},{"indexed":false,"name":"registrationDate","type":"uint256"}],"name":"AuctionStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"hash","type":"bytes32"},{"indexed":true,"name":"bidder","type":"address"},{"indexed":false,"name":"deposit","type":"uint256"}],"name":"NewBid","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"hash","type":"bytes32"},{"indexed":true,"name":"owner","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"status","type":"uint8"}],"name":"BidRevealed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"hash","type":"bytes32"},{"indexed":true,"name":"owner","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"registrationDate","type":"uint256"}],"name":"HashRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"hash","type":"bytes32"},{"indexed":false,"name":"value","type":"uint256"}],"name":"HashReleased","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"hash","type":"bytes32"},{"indexed":true,"name":"name","type":"string"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"registrationDate","type":"uint256"}],"name":"HashInvalidated","type":"event"}]'), {
            address: '0x6090A6e47849629b7245Dfa1Ca21D94cd15878Ef',
        });
    }
    EthRegistrar.assertIsValidLabel = function (label) {
        if (!/^[\d\w-]{7,}$/.test(label)) {
            throw new TypeError("label<" + label + "> is invalid");
        }
    };
    Object.defineProperty(EthRegistrar.prototype, "wallet", {
        get: function () {
            return this._wallet;
        },
        set: function (newWallet) {
            this._wallet = newWallet;
            this.registrar.wallet = newWallet;
            this.deed.wallet = newWallet;
        },
        enumerable: true,
        configurable: true
    });
    EthRegistrar.prototype.isOwner = function (label) {
        return __awaiter(this, void 0, void 0, function () {
            var shaLabel, entries, deedOwner, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        EthRegistrar.assertIsValidLabel(label);
                        shaLabel = js_sha3_1.keccak_256(label);
                        return [4, this.registrar.function.entries(shaLabel).call()];
                    case 1:
                        entries = _b.sent();
                        if (entries[0].toNumber() !== 4) {
                            return [2, false];
                        }
                        return [4, this.deed.function.owner().call({ to: entries[1] })];
                    case 2:
                        deedOwner = _b.sent();
                        _a = deedOwner;
                        return [4, this.wallet.account()];
                    case 3: return [2, _a === (_b.sent())];
                }
            });
        });
    };
    EthRegistrar.prototype.isAuctionAvailable = function (label) {
        return __awaiter(this, void 0, void 0, function () {
            var shaLabel, labelState, isOpen;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        EthRegistrar.assertIsValidLabel(label);
                        shaLabel = js_sha3_1.keccak_256(label);
                        return [4, this.registrar.function.state(shaLabel).call()];
                    case 1:
                        labelState = _a.sent();
                        isOpen = labelState === 0 && (this.strict === false || labelState === 1);
                        return [2, isOpen];
                }
            });
        });
    };
    EthRegistrar.prototype.areAllAuctionsAvailable = function (labels) {
        if (labels === void 0) { labels = []; }
        return __awaiter(this, void 0, void 0, function () {
            var e_1, _a, _b, _c, isOpen, e_1_1;
            var _this = this;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        labels.forEach(EthRegistrar.assertIsValidLabel);
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        return [4, Promise.all(labels.map(function (label) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                return [2, this.isAuctionAvailable(label)];
                            }); }); }))];
                    case 2:
                        _b = __values.apply(void 0, [_d.sent()]), _c = _b.next();
                        _d.label = 3;
                    case 3:
                        if (!!_c.done) return [3, 5];
                        isOpen = _c.value;
                        if (!isOpen) {
                            return [2, false];
                        }
                        _d.label = 4;
                    case 4:
                        _c = _b.next();
                        return [3, 3];
                    case 5: return [3, 8];
                    case 6:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3, 8];
                    case 7:
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7];
                    case 8: return [2, true];
                }
            });
        });
    };
    EthRegistrar.prototype.startAuctions = function (labels) {
        if (labels === void 0) { labels = []; }
        return __awaiter(this, void 0, void 0, function () {
            var openLabels;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        labels.forEach(EthRegistrar.assertIsValidLabel);
                        return [4, this.filterOpenAuctions(labels)];
                    case 1:
                        openLabels = _a.sent();
                        return [2, this.registrar.function
                                .startAuctions(openLabels.map(js_sha3_1.keccak_256))
                                .send()];
                }
            });
        });
    };
    EthRegistrar.prototype.bid = function (label, chaff, value, salt) {
        if (chaff === void 0) { chaff = []; }
        if (value === void 0) { value = 10000000000000000; }
        if (salt === void 0) { salt = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var shaLabel, labelState, shaBid, _a, _b, _c, openChaffLabels;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        EthRegistrar.assertIsValidLabel(label);
                        chaff.forEach(EthRegistrar.assertIsValidLabel);
                        shaLabel = js_sha3_1.keccak_256(label);
                        if (value < 10000000000000000) {
                            throw new Error('value must be at least 10000000000000000 wei');
                        }
                        return [4, this.registrar.function
                                .state(shaLabel)
                                .call()];
                    case 1:
                        labelState = (_d.sent()).toNumber();
                        if (labelState !== 0 && labelState !== 1) {
                            throw new Error("'" + label + "' is unavailable for bidding");
                        }
                        _b = (_a = this.registrar.function).shaBid;
                        _c = [shaLabel];
                        return [4, this.wallet.account()];
                    case 2: return [4, _b.apply(_a, _c.concat([_d.sent(), value, js_sha3_1.keccak_256(salt)]))
                            .call()];
                    case 3:
                        shaBid = _d.sent();
                        if (!(labelState === 0)) return [3, 5];
                        return [4, this.filterOpenAuctions(chaff)];
                    case 4:
                        openChaffLabels = _d.sent();
                        return [2, this.registrar.function
                                .startAuctionsAndBid(openChaffLabels.map(js_sha3_1.keccak_256), shaBid)
                                .send({ value: value })];
                    case 5: return [2, this.registrar.function.newBid(shaBid).send({ value: value })];
                }
            });
        });
    };
    EthRegistrar.prototype.unseal = function (label, value, salt) {
        if (value === void 0) { value = 10000000000000000; }
        if (salt === void 0) { salt = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var shaLabel, labelState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        EthRegistrar.assertIsValidLabel(label);
                        shaLabel = js_sha3_1.keccak_256(label);
                        if (value < 10000000000000000) {
                            throw new Error('value must be at least 10000000000000000 wei');
                        }
                        return [4, this.registrar.function
                                .state(shaLabel)
                                .call()];
                    case 1:
                        labelState = (_a.sent()).toNumber();
                        if (labelState !== 4) {
                            throw new Error("'" + label + "' is not in 'reveal' phase");
                        }
                        return [2, this.registrar.function
                                .unsealBid(shaLabel, value, js_sha3_1.keccak_256(salt))
                                .send()];
                }
            });
        });
    };
    EthRegistrar.prototype.finalize = function (label) {
        return __awaiter(this, void 0, void 0, function () {
            var isOwner, shaLabel;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        EthRegistrar.assertIsValidLabel(label);
                        return [4, this.isOwner(label)];
                    case 1:
                        isOwner = _a.sent();
                        if (!isOwner) {
                            throw new Error("you don't own '" + label + "'");
                        }
                        shaLabel = js_sha3_1.keccak_256(label);
                        return [2, this.registrar.function.finalizeAuction(shaLabel).send()];
                }
            });
        });
    };
    EthRegistrar.prototype.transfer = function (label, newOwner) {
        return __awaiter(this, void 0, void 0, function () {
            var isOwner, shaLabel;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        EthRegistrar.assertIsValidLabel(label);
                        if (typeof newOwner === 'string') {
                            if (!/^0x[\da-fA-F]$/.test(newOwner)) {
                                throw new TypeError("newOwner<" + newOwner + "> is invalid");
                            }
                        }
                        else if (newOwner.byteLength !== 20) {
                            throw new TypeError("newOwner<" + newOwner + "> is invalid");
                        }
                        return [4, this.isOwner(label)];
                    case 1:
                        isOwner = _a.sent();
                        if (!isOwner) {
                            throw new Error("you don't own '" + label + "'");
                        }
                        shaLabel = js_sha3_1.keccak_256(label);
                        return [2, this.registrar.function.finalizeAuction(shaLabel, newOwner).send()];
                }
            });
        });
    };
    EthRegistrar.prototype.releaseDeed = function (label) {
        return __awaiter(this, void 0, void 0, function () {
            var isOwner, shaLabel, entries;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        EthRegistrar.assertIsValidLabel(label);
                        return [4, this.isOwner(label)];
                    case 1:
                        isOwner = _a.sent();
                        if (!isOwner) {
                            throw new Error("you must be the owner of '" + label + "' to release the deed");
                        }
                        shaLabel = js_sha3_1.keccak_256(label);
                        return [4, this.registrar.function.entries(shaLabel).call()];
                    case 2:
                        entries = _a.sent();
                        if (parseInt(entries[2], 10) <
                            Math.round(new Date().valueOf() / 1000) + 60 * 60 * 24 * 365) {
                            throw new Error(label + " can only be released one year after the registration date. wait until " + new Date(parseInt(entries[2], 10) * 1000).toUTCString());
                        }
                        return [2, this.registrar.function.releaseDeed(shaLabel).send()];
                }
            });
        });
    };
    EthRegistrar.prototype.filterOpenAuctions = function (labels) {
        if (labels === void 0) { labels = []; }
        return __awaiter(this, void 0, void 0, function () {
            var openLabels, areAllOpen;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        openLabels = [];
                        if (!this.strict) return [3, 2];
                        return [4, this.areAllAuctionsAvailable(labels)];
                    case 1:
                        areAllOpen = _a.sent();
                        if (areAllOpen) {
                            openLabels.push.apply(openLabels, __spread(labels));
                        }
                        else {
                            throw new Error('all labels must be available in strict mode');
                        }
                        return [3, 4];
                    case 2: return [4, Promise.all(labels.map(function (label) { return __awaiter(_this, void 0, void 0, function () {
                            var isOpen;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4, this.isAuctionAvailable(label)];
                                    case 1:
                                        isOpen = _a.sent();
                                        if (isOpen) {
                                            openLabels.push(label);
                                        }
                                        return [2];
                                }
                            });
                        }); }))];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2, openLabels];
                }
            });
        });
    };
    return EthRegistrar;
}());
exports.EthRegistrar = EthRegistrar;
