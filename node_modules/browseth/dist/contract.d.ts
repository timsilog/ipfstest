import { AbiCodec, JsonInterface } from './abi';
import { Wallet } from './wallet';
export declare class Contract {
    wallet: Wallet;
    options: {
        address?: string;
        bytecode?: string;
    };
    abi: AbiCodec;
    function: {
        [k: string]: (...params: any[]) => {
            send(transaction?: object): Promise<string>;
            call(transaction?: object, block?: string): Promise<any>;
            gas(transaction?: object, block?: string): Promise<string>;
        };
    };
    event: {
        [k: string]: (topics?: {
            [k: string]: any | any[];
        }) => {
            logs(...logOpts: any[]): Promise<Array<{
                address: string;
                topics: Array<string | string[]>;
                data: string;
                blockNumber: string;
                transactionHash: string;
                transactionIndex: string;
                blockHash: string;
                logIndex: string;
                removed: boolean;
                decodedTopics: {
                    [k: string]: string;
                };
            }>>;
        };
    };
    constructor(wallet: Wallet, jsonInterface: JsonInterface, options?: {
        address?: string;
        bytecode?: string;
    });
    deploy(...params: any[]): {
        send(transaction?: object): Promise<string>;
        gas(transaction?: object, block?: string): Promise<string>;
    };
    readonly e: {
        [k: string]: (topics?: {
            [k: string]: any;
        } | undefined) => {
            logs(...logOpts: any[]): Promise<{
                address: string;
                topics: (string | string[])[];
                data: string;
                blockNumber: string;
                transactionHash: string;
                transactionIndex: string;
                blockHash: string;
                logIndex: string;
                removed: boolean;
                decodedTopics: {
                    [k: string]: string;
                };
            }[]>;
        };
    };
    readonly f: {
        [k: string]: (...params: any[]) => {
            send(transaction?: object | undefined): Promise<string>;
            call(transaction?: object | undefined, block?: string | undefined): Promise<any>;
            gas(transaction?: object | undefined, block?: string | undefined): Promise<string>;
        };
    };
    readonly methods: {
        [k: string]: (...params: any[]) => {
            send(transaction?: object | undefined): Promise<string>;
            call(transaction?: object | undefined, block?: string | undefined): Promise<any>;
            gas(transaction?: object | undefined, block?: string | undefined): Promise<string>;
        };
    };
}
