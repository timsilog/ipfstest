/// <reference types="node" />
export interface InitObject {
    emptyRepo: boolean;
    bits: number;
    pass: string;
}
export interface ExperimentalObject {
    pubsub: boolean;
    sharding: boolean;
    dht: boolean;
    relay: {
        enabled: boolean;
        hop: {
            enabled: boolean;
            active: boolean;
        };
    };
}
export interface ConfigObject {
    Addresses: {
        Swarm: string[];
        API: string;
        Gateway: string;
    };
    Discovery: {
        MDNS: {
            Enabled: boolean;
            Interval: number;
        };
        webRTCStar: {
            Enabled: boolean;
        };
    };
    Bootstrap: string[];
}
export interface IpfsOptions {
    repo?: string;
    init?: boolean | InitObject;
    start?: boolean;
    pass?: string;
    EXPERIMENTAL?: ExperimentalObject;
    config?: ConfigObject;
    libp2p?: {
        modules: {
            transport: any[];
            discovery: any[];
        };
    };
}
export interface UploadOptions {
    'cid-version': number;
    progress: () => void;
    recursive: boolean;
    hashAlg: string;
    hash: string;
    wrapWithDirectory: boolean;
    onlyHash: boolean;
}
export interface CID {
    version: number;
    codec: string;
    multihash: Buffer;
}
export declare class Ipfs {
    private options?;
    daemon: any;
    private node;
    constructor(options?: IpfsOptions | undefined);
    start(): Promise<any>;
    stop(): Promise<void> | undefined;
    getNodeStatus(): string | null;
    upload(data: string | Buffer | ArrayBuffer | ArrayBufferView | object[], options?: UploadOptions, cb?: () => void): Promise<Array<{
        path: string;
        hash: string;
        size: number;
    }>>;
    download(path: string): Promise<Buffer>;
    viewFiles(path: string): Promise<Array<{
        depth: number;
        name: string;
        path: string;
        size: number;
        type: string;
    }>>;
    downloadDirectory(path: string): Promise<Array<{
        depth: number;
        name: string;
        path: string;
        size: number;
        hash: Buffer;
        content: Buffer | undefined;
        type: string;
    }>>;
    uploadObject(obj: any, options?: {
        format?: string;
        hashAlg?: string;
    } | {
        cid: string;
    }): Promise<CID>;
    downloadObject(cid: CID | string): Promise<{
        value: any;
        remainderPath: string;
    }>;
    peers(): Promise<{}>;
    id(): Promise<{}>;
    spawnDaemon(): Promise<{}>;
    stopDaemon(): Promise<{}>;
}
export default Ipfs;
