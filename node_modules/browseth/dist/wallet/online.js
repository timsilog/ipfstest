"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = require("../crypto");
var Online = (function () {
    function Online(rpc, options) {
        if (options === void 0) { options = { gasPrice: '0x0' }; }
        var _this = this;
        this.rpc = rpc;
        this.options = options;
        this.batch = {
            send: function (transaction, cb) { return __awaiter(_this, void 0, void 0, function () {
                var tx, _a, _b, _c, _d, _e, _f, _g;
                return __generator(this, function (_h) {
                    switch (_h.label) {
                        case 0:
                            _a = [{ gasPrice: this.options.gasPrice }, transaction];
                            _b = {};
                            return [4, this.account()];
                        case 1:
                            tx = __assign.apply(void 0, _a.concat([(_b.from = _h.sent(), _b)]));
                            _c = {
                                method: 'eth_sendTransaction'
                            };
                            _d = crypto_1.toHex;
                            _e = [{}, tx];
                            _f = {};
                            _g = tx.gas;
                            if (_g) return [3, 3];
                            return [4, this.gas(tx)];
                        case 2:
                            _g = (_h.sent());
                            _h.label = 3;
                        case 3: return [2, [
                                (_c.params = [_d.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.gas = _g, _f)]))])],
                                    _c),
                                cb
                            ]];
                    }
                });
            }); },
            call: function (transaction, block, cb) { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _a = {
                                method: 'eth_call'
                            };
                            _b = crypto_1.toHex;
                            _c = [{ gasPrice: this.options.gasPrice }, transaction];
                            _d = {};
                            return [4, this.account()];
                        case 1: return [2, [
                                (_a.params = [_b.apply(void 0, [__assign.apply(void 0, _c.concat([(_d.from = _e.sent(), _d)]))]),
                                    block],
                                    _a),
                                cb
                            ]];
                    }
                });
            }); },
            gas: function (transaction, block, cb) { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _a = {
                                method: 'eth_estimateGas'
                            };
                            _b = crypto_1.toHex;
                            _c = [{ gasPrice: this.options.gasPrice }, transaction];
                            _d = {};
                            return [4, this.account()];
                        case 1: return [2, [
                                (_a.params = [_b.apply(void 0, [__assign.apply(void 0, _c.concat([(_d.from = _e.sent(), _d)]))])],
                                    _a),
                                cb
                            ]];
                    }
                });
            }); }
        };
        this.account = function () { return _this.rpc.send('eth_coinbase'); };
        this.accounts = function () { return _this.rpc.send('eth_accounts'); };
        this.send = function (transaction) { return __awaiter(_this, void 0, void 0, function () {
            var tx, _a, _b, _c, _d, _e, _f, _g, _h, _j;
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        _a = [{ gasPrice: this.options.gasPrice }, transaction];
                        _b = {};
                        return [4, this.account()];
                    case 1:
                        tx = __assign.apply(void 0, _a.concat([(_b.from = _k.sent(), _b)]));
                        _d = (_c = this.rpc).send;
                        _e = ['eth_sendTransaction'];
                        _f = crypto_1.toHex;
                        _g = [{}, tx];
                        _h = {};
                        _j = tx.gas;
                        if (_j) return [3, 3];
                        return [4, this.gas(tx)];
                    case 2:
                        _j = (_k.sent());
                        _k.label = 3;
                    case 3: return [2, _d.apply(_c, _e.concat([_f.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.gas = _j, _h)]))])]))];
                }
            });
        }); };
        this.call = function (transaction, block) { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _b = (_a = this.rpc).send;
                        _c = ['eth_call'];
                        _d = crypto_1.toHex;
                        _e = [{ gasPrice: this.options.gasPrice }, transaction];
                        _f = {};
                        return [4, this.account()];
                    case 1: return [2, _b.apply(_a, _c.concat([_d.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.from = _g.sent(), _f)]))]),
                            block]))];
                }
            });
        }); };
        this.gas = function (transaction, block) { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _b = (_a = this.rpc).send;
                        _c = ['eth_estimateGas'];
                        _d = crypto_1.toHex;
                        _e = [{ gasPrice: this.options.gasPrice }, transaction];
                        _f = {};
                        return [4, this.account()];
                    case 1: return [2, _b.apply(_a, _c.concat([_d.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.from = _g.sent(), _f)]))])]))];
                }
            });
        }); };
        this.sign = function (message) { return __awaiter(_this, void 0, void 0, function () { var _a, _b, _c; return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (_a = this.rpc).send;
                    _c = ['eth_sign'];
                    return [4, this.account()];
                case 1: return [2, _b.apply(_a, _c.concat([_d.sent(), message]))];
            }
        }); }); };
    }
    return Online;
}());
exports.Online = Online;
