"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = require("../crypto");
var Offline = (function () {
    function Offline(rpc, signer, options) {
        if (options === void 0) { options = { gasPrice: '0x0' }; }
        var _this = this;
        this.rpc = rpc;
        this.signer = signer;
        this.options = options;
        this.batch = {
            send: function (transaction, cb) { return __awaiter(_this, void 0, void 0, function () {
                var tx, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                return __generator(this, function (_m) {
                    switch (_m.label) {
                        case 0:
                            _a = [{ gasPrice: this.options.gasPrice }, transaction];
                            _b = {};
                            return [4, this.signer.account()];
                        case 1:
                            tx = __assign.apply(void 0, _a.concat([(_b.from = _m.sent(), _b)]));
                            _c = {
                                method: 'eth_sendRawTransaction'
                            };
                            _e = (_d = this.signer).signTransaction;
                            _f = crypto_1.toHex;
                            _g = [{}, tx];
                            _h = {};
                            _j = tx.gas;
                            if (_j) return [3, 3];
                            return [4, this.rpc.send('eth_estimateGas', tx)];
                        case 2:
                            _j = (_m.sent());
                            _m.label = 3;
                        case 3:
                            _h.gas = _j, _h.gasPrice = tx.gasPrice;
                            return [4, this.rpc.send('eth_getTransactionCount', tx.from, 'latest')];
                        case 4:
                            _h.nonce = _m.sent();
                            _k = tx.chainId;
                            if (_k) return [3, 6];
                            _l = parseInt;
                            return [4, this.rpc.send('net_version')];
                        case 5:
                            _k = _l.apply(void 0, [_m.sent(), 10]);
                            _m.label = 6;
                        case 6: return [4, _e.apply(_d, [_f.apply(void 0, [__assign.apply(void 0, _g.concat([(_h.chainId = _k, _h)]))])])];
                        case 7: return [2, [
                                (_c.params = [_m.sent()],
                                    _c),
                                cb
                            ]];
                    }
                });
            }); },
            call: function (transaction, block, cb) { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _a = {
                                method: 'eth_call'
                            };
                            _b = crypto_1.toHex;
                            _c = [{ gasPrice: this.options.gasPrice }, transaction];
                            _d = {};
                            return [4, this.account()];
                        case 1: return [2, [
                                (_a.params = [_b.apply(void 0, [__assign.apply(void 0, _c.concat([(_d.from = _e.sent(), _d)]))]),
                                    block],
                                    _a),
                                cb
                            ]];
                    }
                });
            }); },
            gas: function (transaction, block, cb) { return __awaiter(_this, void 0, void 0, function () {
                var _a, _b, _c, _d;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            _a = {
                                method: 'eth_estimateGas'
                            };
                            _b = crypto_1.toHex;
                            _c = [{ gasPrice: this.options.gasPrice }, transaction];
                            _d = {};
                            return [4, this.account()];
                        case 1: return [2, [
                                (_a.params = [_b.apply(void 0, [__assign.apply(void 0, _c.concat([(_d.from = _e.sent(), _d)]))])],
                                    _a),
                                cb
                            ]];
                    }
                });
            }); }
        };
        this.account = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _a;
            return (_a = _this.signer).account.apply(_a, __spread(args));
        };
        this.send = function (transaction) { return __awaiter(_this, void 0, void 0, function () {
            var tx, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            return __generator(this, function (_p) {
                switch (_p.label) {
                    case 0:
                        _a = [{ gasPrice: this.options.gasPrice }, transaction];
                        _b = {};
                        return [4, this.signer.account()];
                    case 1:
                        tx = __assign.apply(void 0, _a.concat([(_b.from = _p.sent(), _b)]));
                        _d = (_c = this.rpc).send;
                        _e = ['eth_sendRawTransaction'];
                        _g = (_f = this.signer).signTransaction;
                        _h = crypto_1.toHex;
                        _j = [{}, tx];
                        _k = {};
                        _l = tx.gas;
                        if (_l) return [3, 3];
                        return [4, this.rpc.send('eth_estimateGas', tx)];
                    case 2:
                        _l = (_p.sent());
                        _p.label = 3;
                    case 3:
                        _k.gas = _l, _k.gasPrice = tx.gasPrice;
                        return [4, this.rpc.send('eth_getTransactionCount', tx.from, 'latest')];
                    case 4:
                        _k.nonce = _p.sent();
                        _m = tx.chainId;
                        if (_m) return [3, 6];
                        _o = parseInt;
                        return [4, this.rpc.send('net_version')];
                    case 5:
                        _m = _o.apply(void 0, [_p.sent(), 10]);
                        _p.label = 6;
                    case 6: return [4, _g.apply(_f, [_h.apply(void 0, [__assign.apply(void 0, _j.concat([(_k.chainId = _m, _k)]))])])];
                    case 7: return [2, _d.apply(_c, _e.concat([_p.sent()]))];
                }
            });
        }); };
        this.call = function (transaction, block) { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _b = (_a = this.rpc).send;
                        _c = ['eth_call'];
                        _d = crypto_1.toHex;
                        _e = [{ gasPrice: this.options.gasPrice }, transaction];
                        _f = {};
                        return [4, this.account()];
                    case 1: return [2, _b.apply(_a, _c.concat([_d.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.from = _g.sent(), _f)]))]),
                            block]))];
                }
            });
        }); };
        this.gas = function (transaction, block) { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _b = (_a = this.rpc).send;
                        _c = ['eth_estimateGas'];
                        _d = crypto_1.toHex;
                        _e = [{ gasPrice: this.options.gasPrice }, transaction];
                        _f = {};
                        return [4, this.account()];
                    case 1: return [2, _b.apply(_a, _c.concat([_d.apply(void 0, [__assign.apply(void 0, _e.concat([(_f.from = _g.sent(), _f)]))])]))];
                }
            });
        }); };
        this.sign = function (message) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2, this.signer.signMessage(message)];
        }); }); };
    }
    return Offline;
}());
exports.Offline = Offline;
