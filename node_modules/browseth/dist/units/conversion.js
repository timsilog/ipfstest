"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bn_js_1 = require("bn.js");
exports.units = {
    wei: '1',
    kwei: '1000',
    ada: '1000',
    femtoether: '1000',
    mwei: '1000000',
    babbage: '1000000',
    picoether: '1000000',
    gwei: '1000000000',
    shannon: '1000000000',
    nanoether: '1000000000',
    nano: '1000000000',
    szabo: '1000000000000',
    microether: '1000000000000',
    micro: '1000000000000',
    finney: '1000000000000000',
    milliether: '1000000000000000',
    milli: '1000000000000000',
    ether: '1000000000000000000',
    kether: '1000000000000000000000',
    grand: '1000000000000000000000',
    einstein: '1000000000000000000000',
    mether: '1000000000000000000000000',
    gether: '1000000000000000000000000000',
    tether: '1000000000000000000000000000000',
};
function etherToWei(amountInEther) {
    return convert(amountInEther, 'ether');
}
exports.etherToWei = etherToWei;
function gweiToWei(amountInGwei) {
    return convert(amountInGwei, 'gwei');
}
exports.gweiToWei = gweiToWei;
function convert(amount, from, to) {
    if (to === void 0) { to = 'wei'; }
    var fUnit = getUnit(from.toLowerCase());
    var tUnit = getUnit(to.toLowerCase());
    var amt = '';
    if (typeof amount === 'number') {
        throw new Error("For {" + amount + "}, please use a string for numbers to avoid precision issues.");
    }
    else if (typeof amount === 'string') {
        amt = amount.toLowerCase();
    }
    else {
        amt = amount.toString(10);
    }
    if (/^-/.test(amt)) {
        throw new Error("{" + amt + "}: Please use a positive number");
    }
    if (!(/^(\d*\.\d+)|\d+$/.test(amt))) {
        if (!(/^0x[0-9a-f]+$/i.test(amt))) {
            throw new Error("'" + amount + "' is not a valid number or hex");
        }
    }
    if (amt.includes('0x')) {
        amt = new bn_js_1.BN(amt.replace('0x', ''), 16).toString(10);
    }
    return doConversion(amt, fUnit, tUnit, to === 'wei' ? true : false);
}
exports.convert = convert;
function doConversion(amount, from, to, toWei) {
    var arr = amount.split('.');
    var left = arr[0].replace(/^[0]+/, '0');
    var right = arr[1] ? arr[1].replace(/[0]+$/, '') : '';
    if (from === to) {
        if (toWei) {
            return '0x' + new bn_js_1.BN(left).toString(16);
        }
        return (left ? left : '0') + (right ? "." + right : '');
    }
    else if (from < to) {
        var unitLen = new bn_js_1.BN(to).div(new bn_js_1.BN(from)).toString(10).length - 1;
        if (left.length > unitLen) {
            var res = left.slice(0, left.length - unitLen);
            right = left.slice(left.length - unitLen) + right;
            return (res ? res : '0') + (right ? '.' + right : '');
        }
        else {
            var zeroes = '';
            for (var i = 0; i < unitLen - left.length; i++) {
                zeroes += '0';
            }
            return '0' + (right || left ? ('.' + zeroes + left + right) : '');
        }
    }
    else {
        var unitLen = new bn_js_1.BN(from).div(new bn_js_1.BN(to)).toString(10).length - 1;
        if (right.length > unitLen) {
            var rightL = right.slice(0, unitLen - right.length);
            right = right.slice(unitLen - right.length);
            if (toWei) {
                return '0x' + new bn_js_1.BN(left + rightL).toString(16);
            }
            var res = left + rightL;
            return (res ? res : '0') + (right ? '.' + right : '');
        }
        else {
            if (toWei) {
                return '0x' + new bn_js_1.BN(left + right).mul(new bn_js_1.BN(10).pow(new bn_js_1.BN(unitLen - right.length))).toString(16);
            }
            return new bn_js_1.BN(left + right).mul(new bn_js_1.BN(10).pow(new bn_js_1.BN(unitLen - right.length))).toString(10);
        }
    }
}
function getUnit(unit) {
    if (!(unit in exports.units)) {
        throw new Error("'" + unit + "' is not a valid unit");
    }
    return exports.units[unit];
}
