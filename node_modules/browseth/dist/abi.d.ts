export interface Param {
    name: string;
    type: string;
}
export interface FallbackElement {
    type: 'fallback';
    payable?: boolean;
    stateMutability?: 'pure' | 'view' | 'nonpayable' | 'payable';
    constant?: boolean;
}
export interface ConstructorElement {
    type: 'constructor';
    inputs: Param[];
    payable?: boolean;
    stateMutability?: 'pure' | 'view' | 'nonpayable' | 'payable';
    constant?: boolean;
}
export interface FunctionElement {
    type: 'function';
    name: string;
    inputs: Param[];
    outputs: Param[];
    payable?: boolean;
    stateMutability?: 'pure' | 'view' | 'nonpayable' | 'payable';
    constant?: boolean;
}
export declare type MethodElement = FunctionElement | ConstructorElement | FallbackElement;
export interface EventParam extends Param {
    indexed: boolean;
}
export interface EventElement {
    type: 'event';
    name: string;
    inputs: EventParam[];
    anonymous: boolean;
}
export declare type JsonInterface = Array<MethodElement | EventElement>;
export interface AbiCodec {
    constructor: ConstructorElement & {
        encode?(bytecode: string, ...params: any[]): string;
    };
    event: {
        [k: string]: EventElement & {
            signature: string;
            encode(topics: {
                [k: string]: any;
            }): Array<string | string[]>;
            decode(raw: string[]): any;
        };
    };
    function: {
        [k: string]: FunctionElement & {
            signature: string;
            encode(...params: any[]): string;
            decode(raw: string): any;
        };
    };
}
export declare function createAbiCodec(jsonInterface: JsonInterface): AbiCodec;
