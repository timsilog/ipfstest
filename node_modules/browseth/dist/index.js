"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hw_transport_u2f_1 = require("@ledgerhq/hw-transport-u2f");
var bn_js_1 = require("bn.js");
var Apis = require("./api");
var common_1 = require("./common");
var contract_1 = require("./contract");
var explorer_1 = require("./explorer");
var Fs = require("./fs");
var Rpcs = require("./rpc");
var Signers = require("./signers");
var Xhr = require("./transport/xhr");
var Units = require("./units");
var Wallets = require("./wallet");
Signers.Ledger.Transport = hw_transport_u2f_1.default;
var Browseth = (function () {
    function Browseth(initializer, options) {
        if (options === void 0) { options = { gasPrice: '0x0' }; }
        this.options = options;
        this.contract = {};
        this.api = {};
        if (typeof initializer === 'string') {
            this._rpc = new Rpcs.Default(Browseth.transport, initializer);
            this._wallet = new Wallets.ReadOnly(this._rpc);
        }
        else if (initializer instanceof Rpcs.Rpc) {
            this._rpc = initializer;
            this._wallet = new Wallets.ReadOnly(this._rpc);
        }
        else if (initializer instanceof Wallets.Wallet) {
            this._rpc = initializer.rpc;
            this._wallet = initializer;
        }
        else {
            this._rpc = new Rpcs.Default(Browseth.transport);
            this._wallet = new Wallets.ReadOnly(this._rpc);
        }
    }
    Object.defineProperty(Browseth.prototype, "rpc", {
        get: function () {
            return this._rpc;
        },
        set: function (newRpc) {
            this._rpc = newRpc;
            this.wallet.rpc = newRpc;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Browseth.prototype, "wallet", {
        get: function () {
            return this._wallet;
        },
        set: function (newWallet) {
            var _this = this;
            this._rpc = newWallet.rpc;
            this._wallet = newWallet;
            Object.keys(this.c).forEach(function (k) {
                _this.contract[k].wallet = newWallet;
            });
            Object.keys(this.api).forEach(function (k) {
                _this.api[k].wallet = newWallet;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Browseth.prototype, "c", {
        get: function () {
            return this.contract;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Browseth.prototype, "w", {
        get: function () {
            return this.wallet;
        },
        enumerable: true,
        configurable: true
    });
    Browseth.prototype.addContract = function (name, jsonInterface, options) {
        if (options === void 0) { options = {}; }
        this.c[name] = new contract_1.Contract(this.wallet, typeof jsonInterface === 'string'
            ? JSON.parse(jsonInterface)
            : jsonInterface, options);
        return this;
    };
    Browseth.prototype.addApi = function (name, api) {
        api.wallet = this._wallet;
        this.api[name] = api;
        return this;
    };
    Browseth.prototype.setGasPrice = function (amount) {
        var amt = '';
        if (typeof amount === 'number') {
            throw new Error("For {" + amount + "}, please use a string for numbers to avoid precision issues.");
        }
        else if (typeof amount === 'string') {
            amt = amount;
            if (/^-/.test(amt)) {
                throw new Error("{" + amt + "}: Please use a positive number");
            }
            if (!/^(\d*\.\d+)|\d+$$/.test(amt)) {
                if (!/^0x[0-9a-f]+$/i.test(amt)) {
                    throw new Error("'" + amount + "' is not a valid number or hex");
                }
            }
            if (!amt.includes('0x')) {
                amt = '0x' + new bn_js_1.BN(amt).toString(16);
            }
        }
        else {
            amt = '0x' + amount.toString(16);
        }
        this.options.gasPrice = amt;
        this.wallet.options.gasPrice = amt;
    };
    Browseth.Rpcs = Rpcs;
    Browseth.Wallets = Wallets;
    Browseth.Signers = Signers;
    Browseth.Apis = Apis;
    Browseth.Units = Units;
    Browseth.Fs = Fs;
    Browseth.BlockChainExplorer = explorer_1.default;
    Browseth.tightlyPackedKeccak256 = common_1.tightlyPackedKeccak256;
    Browseth.keccak256 = common_1.keccak256;
    Browseth.serialize = common_1.serialize;
    Browseth.nameUtil = {
        namehash: common_1.namehash,
        subnodeHash: common_1.subnodeHash,
    };
    Browseth.transport = Xhr;
    return Browseth;
}());
exports.default = Browseth;
