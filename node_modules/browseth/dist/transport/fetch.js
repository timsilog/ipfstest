"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
function isSupported() {
    return (typeof Response !== 'undefined' &&
        Response.prototype.hasOwnProperty('body') &&
        typeof Headers === 'function');
}
exports.isSupported = isSupported;
function handle(request, cb) {
    fetchRequest(request)
        .then(function (resp) { return cb(undefined, resp); })
        .catch(cb);
}
exports.handle = handle;
function fetchRequest(request) {
    return __awaiter(this, void 0, void 0, function () {
        var promises;
        var _this = this;
        return __generator(this, function (_a) {
            promises = [
                fetch(request.url, {
                    body: request.msg,
                    headers: request.headers &&
                        new Headers(Object.keys(request.headers).reduce(function (acc, key) {
                            var val = request.headers[key];
                            acc[key] = typeof val === 'string'
                                ? val
                                : val.join(', ');
                            return acc;
                        }, {})),
                    method: 'POST',
                }).then(function (resp) { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, _c;
                    return __generator(this, function (_d) {
                        switch (_d.label) {
                            case 0:
                                if (!(resp.ok !== true)) return [3, 2];
                                _a = Error.bind;
                                _b = "Not ok resp.status<" + resp.status + "> & '";
                                return [4, resp.text()];
                            case 1: throw new (_a.apply(Error, [void 0, _b + (_d.sent()) + "'"]))();
                            case 2:
                                _c = {
                                    headers: {}
                                };
                                return [4, resp.text()];
                            case 3: return [2, (_c.msg = _d.sent(),
                                    _c.status = resp.status,
                                    _c)];
                        }
                    });
                }); }),
            ];
            if (request.timeout) {
                promises.push(new Promise(function (_, r) { return setTimeout(r, request.timeout); }));
            }
            return [2, Promise.race(promises)];
        });
    });
}
