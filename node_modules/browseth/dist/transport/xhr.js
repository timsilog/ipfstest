"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
function isSupported() {
    return typeof module !== 'undefined' && module.exports;
}
exports.isSupported = isSupported;
function handle(request, cb) {
    var xhr = new XMLHttpRequest();
    xhr.addEventListener('load', function () {
        if (xhr.status >= 200 && xhr.status < 300) {
            var headers = xhr.getAllResponseHeaders();
            cb(undefined, {
                headers: headers
                    .trim()
                    .split(/[\r\n]+/)
                    .reduce(function (a, v) {
                    var _a;
                    var _b = __read(v.split(':')), k = _b[0], vals = _b.slice(1);
                    var hs = vals
                        .join(':')
                        .split(',')
                        .map(function (h) { return h.trim(); });
                    return __assign({}, a, (_a = {}, _a[k] = hs.length === 1 ? hs : hs[0], _a));
                }, {}),
                msg: xhr.responseText,
                status: xhr.status,
            });
            return;
        }
        cb(new Error('xhr status error'));
    });
    xhr.addEventListener('timeout', function () {
        cb(new Error('xhr timeout'));
    });
    xhr.addEventListener('error', function () {
        cb(new Error('xhr error'));
    });
    xhr.open('POST', request.url, true);
    if (request.headers) {
        Object.keys(request.headers).forEach(function (k) {
            var v = request.headers[k];
            xhr.setRequestHeader(k, v instanceof Array ? v.join(', ') : v);
        });
    }
    if (request.timeout) {
        xhr.timeout = request.timeout;
    }
    xhr.send(request.msg);
}
exports.handle = handle;
