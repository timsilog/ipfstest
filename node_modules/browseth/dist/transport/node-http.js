"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var http = require("http");
var https = require("https");
var url = require("url");
function isSupported() {
    return typeof module !== 'undefined' && module.exports;
}
exports.isSupported = isSupported;
function handle(request, cb) {
    var parsedUrl = url.parse(request.url);
    var httpRequest = (parsedUrl.protocol === 'https:'
        ? https.request
        : http.request)({
        headers: request.headers,
        host: parsedUrl.hostname,
        method: 'POST',
        path: parsedUrl.path,
        port: parsedUrl.port ? parseInt(parsedUrl.port, 10) : undefined,
    }, function (resp) {
        var chunks = [];
        resp.on('data', function (chunk) {
            chunks.push(chunk);
        });
        resp.once('end', function () {
            var _a;
            cb(undefined, {
                msg: (_a = String.prototype).concat.apply(_a, __spread(chunks)),
                status: resp.statusCode,
            });
        });
    });
    if (request.timeout) {
        httpRequest.on('socket', function (socket) {
            socket.setTimeout(request.timeout);
            socket.on('timeout', function () {
                cb(new Error("timout after " + request.timeout));
                httpRequest.abort();
            });
        });
    }
    if (request.msg) {
        httpRequest.write(request.msg);
    }
    httpRequest.end();
    httpRequest.once('error', cb);
}
exports.handle = handle;
