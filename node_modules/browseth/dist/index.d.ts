import { BN } from 'bn.js';
import { JsonInterface } from './abi';
import * as Apis from './api';
import { keccak256, namehash, serialize, subnodeHash, tightlyPackedKeccak256 } from './common';
import { Contract } from './contract';
import BlockchainExplorer from './explorer';
import * as Fs from './fs';
import * as Rpcs from './rpc';
import * as Signers from './signers';
import * as Xhr from './transport/xhr';
import * as Units from './units';
import * as Wallets from './wallet';
declare class Browseth {
    options: {
        gasPrice: string;
    };
    static Rpcs: typeof Rpcs;
    static Wallets: typeof Wallets;
    static Signers: typeof Signers;
    static Apis: typeof Apis;
    static Units: typeof Units;
    static Fs: typeof Fs;
    static BlockChainExplorer: typeof BlockchainExplorer;
    static tightlyPackedKeccak256: typeof tightlyPackedKeccak256;
    static keccak256: typeof keccak256;
    static serialize: typeof serialize;
    static nameUtil: {
        namehash: typeof namehash;
        subnodeHash: typeof subnodeHash;
    };
    static transport: typeof Xhr;
    contract: {
        [k: string]: Contract;
    };
    api: {
        [k: string]: {
            wallet: Wallets.Wallet;
            [k: string]: any;
        };
    };
    private _rpc;
    private _wallet;
    constructor(initializer?: string | Rpcs.Rpc | Wallets.Wallet, options?: {
        gasPrice: string;
    });
    rpc: Rpcs.Rpc;
    wallet: Wallets.Wallet;
    readonly c: {
        [k: string]: Contract;
    };
    readonly w: Wallets.Wallet;
    addContract(name: string, jsonInterface: JsonInterface | string, options?: {
        address?: string;
        bytecode?: string;
    }): this;
    addApi(name: string, api: {
        wallet: Wallets.Wallet;
        [k: string]: any;
    }): this;
    setGasPrice(amount: string | BN): void;
}
export default Browseth;
