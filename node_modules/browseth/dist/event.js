"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Subscription = (function () {
    function Subscription(parent, type, handler) {
        this.parent = parent;
        this.type = type;
        this.handler = handler;
    }
    Subscription.prototype.dispose = function () {
        return this.parent.disposeOf(this.type, this.handler.fn);
    };
    return Subscription;
}());
exports.Subscription = Subscription;
var Emitter = (function () {
    function Emitter(context) {
        this.context = context;
        this.currentHandler = null;
        this.__handlers = {};
    }
    Emitter.prototype.on = function (type, fn, meta) {
        var handler = { fn: fn, meta: meta };
        if (this.__handlers[type]) {
            var index = this.__handlers[type].findIndex(function (h) { return h.fn === fn; });
            if (index >= 0) {
                this.__handlers[type][index] = handler;
            }
            else {
                this.__handlers[type].push(handler);
            }
        }
        else {
            this.__handlers[type] = [handler];
        }
        return new Subscription(this, type, handler);
    };
    Emitter.prototype.once = function (type, fn) {
        return this.on(type, fn, { once: true });
    };
    Emitter.prototype.list = function (type) {
        return this.__handlers[type];
    };
    Emitter.prototype.disposeOf = function (type, fn) {
        if (this.__handlers[type]) {
            this.__handlers[type].splice(this.__handlers[type].findIndex(function (handler) { return handler.fn === fn; }));
        }
    };
    Emitter.prototype.disposeOfAll = function (type) {
        if (type) {
            delete this.__handlers[type];
        }
        else {
            this.__handlers = {};
        }
    };
    Emitter.prototype.emit = function (type, value) {
        var e_1, _a;
        if (this.__handlers[type]) {
            try {
                for (var _b = __values(this.__handlers[type]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var handler = _c.value;
                    if (handler) {
                        this.currentHandler = handler;
                        this.__emitToHandler(handler, type, value);
                    }
                    this.currentHandler = null;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    Emitter.prototype.__emitToHandler = function (handler, type, value) {
        if (!handler.meta) {
            handler.fn(value, this.context);
            return;
        }
        handler.fn.call(handler.meta.thisArg, value, this.context);
        if (handler.meta.once) {
            this.disposeOf(type, handler.fn);
        }
    };
    return Emitter;
}());
exports.Emitter = Emitter;
