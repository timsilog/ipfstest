"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bn_js_1 = require("bn.js");
var BlockchainExplorer = (function () {
    function BlockchainExplorer(rpc) {
        var _this = this;
        this.rpc = rpc;
        this.transaction = {
            receipt: function (hash) {
                return _this.rpc.send('eth_getTransactionReceipt', hash);
            },
            byBlockAndIndex: function (block, index) {
                var blockNum = checkIfString(block);
                var idx = checkIfString(index);
                return /^0x([0-9a-f]{64})/i.test(blockNum)
                    ? _this.rpc.send('eth_getTransactionByBlockHashAndIndex', blockNum, idx)
                    : _this.rpc.send('eth_getTransactionByBlockNumberAndIndex', blockNum, idx);
            },
            byHash: function (hash) {
                return _this.rpc.send('eth_getTransactionByHash', hash);
            },
            countByBlock: function (block) {
                var blockNum = checkIfString(block);
                return /^0x([0-9a-f]{64})/i.test(blockNum)
                    ? _this.rpc.send('eth_getBlockTransactionCountByHash', blockNum)
                    : _this.rpc.send('eth_getBlockTransactionCountByNumber', blockNum);
            },
        };
    }
    BlockchainExplorer.prototype.block = function (block, hasFullTransactions) {
        var blockNum = checkIfString(block);
        return /^0x([0-9a-f]{64})/i.test(blockNum)
            ? this.rpc.send('eth_getBlockByHash', blockNum, hasFullTransactions)
            : this.rpc.send('eth_getBlockByNumber', blockNum, hasFullTransactions);
    };
    BlockchainExplorer.prototype.blockCount = function () {
        return this.rpc.send('eth_blockNumber');
    };
    BlockchainExplorer.prototype.uncle = function (block, index) {
        var blockNum = checkIfString(block);
        var idx = checkIfString(index);
        return /^0x([0-9a-f]{64})/i.test(blockNum)
            ? this.rpc.send('eth_getUncleByBlockHashAndIndex', blockNum, idx)
            : this.rpc.send('eth_getUncleByBlockNumberAndIndex', blockNum, idx);
    };
    BlockchainExplorer.prototype.uncleCount = function (block) {
        var blockNum = checkIfString(block);
        return /^0x([0-9a-f]{64})/i.test(blockNum)
            ? this.rpc.send('eth_getUncleCountByBlockHash', blockNum)
            : this.rpc.send('eth_getUncleCountByBlockNumber', blockNum);
    };
    BlockchainExplorer.prototype.balanceOf = function (address, block) {
        var blockNum = checkIfString(block);
        var addr = /^0x/.test(address) ? address : '0x' + address;
        return this.rpc.send('eth_getBalance', addr, blockNum);
    };
    BlockchainExplorer.prototype.hashRate = function () {
        return this.rpc.send('eth_hashrate');
    };
    BlockchainExplorer.prototype.chainId = function () {
        return this.rpc.send('net_version');
    };
    BlockchainExplorer.prototype.client = function () {
        return this.rpc.send('web3_clientVersion');
    };
    BlockchainExplorer.prototype.codeAt = function (address, block) {
        var addr = /^0x/.test(address) ? address : '0x' + address;
        var blockNum = checkIfString(block);
        return this.rpc.send('eth_getCode', addr, blockNum);
    };
    BlockchainExplorer.prototype.protocolVersion = function () {
        return this.rpc.send('eth_protocolVersion');
    };
    BlockchainExplorer.prototype.sshVersion = function () {
        return this.rpc.send('shh_version');
    };
    BlockchainExplorer.prototype.transactionCount = function (address, block) {
        var addr = checkIfString(address);
        var blockNum = checkIfString(block);
        return this.rpc.send('eth_getTransactionCount', addr, blockNum);
    };
    BlockchainExplorer.prototype.blockTransactionCount = function (block) {
        var blockNum = checkIfString(block);
        return /^0x([0-9a-f]{64})/i.test(blockNum)
            ? this.rpc.send('eth_getBlockTransactionCountByHash', blockNum)
            : this.rpc.send('eth_getBlockTransactionCountByNumber', blockNum);
    };
    BlockchainExplorer.prototype.storageAt = function (address, index, block) {
        var idx = checkIfString(index);
        var blockNum = checkIfString(block);
        return this.rpc.send('eth_getStorageAt', address, idx, blockNum);
    };
    return BlockchainExplorer;
}());
exports.default = BlockchainExplorer;
function checkIfString(val) {
    if (typeof val === 'string') {
        if (/[g-z]/i.test(val)) {
            return val;
        }
        return /^0x/i.test(val) ? val : '0x' + new bn_js_1.BN(val).toString(16);
    }
    return '0x' + val.toString(16);
}
