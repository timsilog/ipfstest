"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorCode;
(function (ErrorCode) {
    ErrorCode[ErrorCode["ParseError"] = -32700] = "ParseError";
    ErrorCode[ErrorCode["InvalidRequest"] = -32600] = "InvalidRequest";
    ErrorCode[ErrorCode["MethodNotFound"] = -32601] = "MethodNotFound";
    ErrorCode[ErrorCode["InvalidParams"] = -32602] = "InvalidParams";
    ErrorCode[ErrorCode["InternalError"] = -32603] = "InternalError";
})(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));
function isRpcError(v) {
    return Boolean(v.error);
}
exports.isRpcError = isRpcError;
var id = 0;
var Rpc = (function () {
    function Rpc() {
    }
    Rpc.prototype.send = function (method) {
        var _this = this;
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        return new Promise(function (resolve, reject) {
            var request = _this.prep({
                method: method,
                params: params,
            }, function (err, result) {
                if (err) {
                    reject(err);
                }
                resolve(result);
            });
            _this.handle(request[0], request[1]);
        });
    };
    Rpc.prototype.batch = function (done) {
        var _this = this;
        var requests = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            requests[_i - 1] = arguments[_i];
        }
        var completionCb;
        if (typeof done !== 'function') {
            requests.unshift(done);
        }
        else {
            completionCb = done;
        }
        var payload = [];
        var cbs = [];
        var preppedRequests = requests.map(function (_a) {
            var _b = __read(_a, 2), request = _b[0], cb = _b[1];
            var prepped = _this.prep(request, cb);
            payload.push(prepped[0]);
            cbs.push(prepped[1]);
        });
        this.handle(payload, function (err, json) {
            if (err) {
                cbs.forEach(function (cb) {
                    cb(err);
                });
                return;
            }
            json.forEach(function (v, i) {
                setImmediate(cbs[i], undefined, v);
            });
            if (completionCb) {
                setImmediate(completionCb);
            }
        });
    };
    Rpc.prototype.promiseBatch = function (resolveFun) {
        var requests = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            requests[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var promises, rF;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = [];
                        rF = Promise.all.bind(Promise);
                        if (typeof resolveFun === 'function') {
                            rF = resolveFun;
                        }
                        else {
                            requests.unshift(resolveFun);
                        }
                        return [4, new Promise(function (r) {
                                _this.batch.apply(_this, __spread([function () {
                                        r();
                                    }], requests.map(function (request) {
                                    return [
                                        request,
                                        function (err, response) {
                                            promises.push(new Promise(function (resolve, reject) {
                                                if (err) {
                                                    reject(err);
                                                }
                                                resolve(response);
                                            }));
                                        },
                                    ];
                                })));
                            })];
                    case 1:
                        _a.sent();
                        return [2, rF(promises)];
                }
            });
        });
    };
    Rpc.prototype.prep = function (request, cb) {
        var payload = {
            method: request.method,
            params: request.params || [],
            id: request.id || (id += 1),
            jsonrpc: '2.0',
        };
        return [
            payload,
            function (err, rpcResponse) {
                if (err) {
                    cb(err);
                    return;
                }
                if (rpcResponse && rpcResponse.id === payload.id) {
                    if (!isRpcError(rpcResponse)) {
                        cb(undefined, rpcResponse.result);
                        return;
                    }
                    cb(new Error(JSON.stringify(rpcResponse)));
                    return;
                }
                cb(new Error("response is malformed: '" + rpcResponse + "'"));
            },
        ];
    };
    return Rpc;
}());
exports.Rpc = Rpc;
