export interface Request<M extends string = string, P extends any[] = any[]> {
    method: M;
    params?: P;
    jsonrpc?: '2.0';
    id?: string | number | null;
}
export declare const enum ErrorCode {
    ParseError = -32700,
    InvalidRequest = -32600,
    MethodNotFound = -32601,
    InvalidParams = -32602,
    InternalError = -32603
}
export interface RpcError {
    id: number | null;
    jsonrpc: '2.0';
    error: {
        code: ErrorCode;
        message: string;
        data?: any;
    };
}
export interface RpcResponse<R extends any = any> {
    id: number | null;
    jsonrpc: '2.0';
    result: R;
}
export declare function isRpcError(v: RpcResponse | RpcError): v is RpcError;
export declare abstract class Rpc {
    send(method: string, ...params: any[]): Promise<any>;
    batch(done: () => void | [Request, (err: Error | void, response: any) => void], ...requests: Array<[Request, (err: Error | void, response: any) => void]>): void;
    promiseBatch(resolveFun: (...promises: Array<Promise<any>>) => Promise<any[]> | Request, ...requests: Request[]): Promise<any[]>;
    prep(request: Request, cb: (err: Error | void, response?: any) => void): [Request, ((err: Error | void, json?: any) => void)];
    abstract handle(payload: any, cb: (err: Error | void, json?: any) => void): void;
}
