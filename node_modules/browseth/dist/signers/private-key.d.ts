/// <reference types="node" />
import { Signer } from './types';
export interface KdfParams {
    dklen: number;
    n?: number;
    c?: number;
    r?: number;
    p?: number;
    salt: string;
    prf?: string;
}
export declare class PrivateKey implements Signer {
    static fromV3(keystore: any, pw: string): Promise<PrivateKey>;
    static fromHex(raw: string): PrivateKey;
    static fromMnemonic(phrase: string | string[], password?: string): Promise<PrivateKey>;
    static fromRandomBytes(): PrivateKey;
    privateKey: Buffer;
    constructor(privKey: Buffer | string);
    account(): Promise<string>;
    signTransaction({ nonce, gasPrice, gas, to, value, data, chainId, }: {
        nonce: string | Buffer | number;
        gasPrice: string | Buffer | number;
        gas: string | Buffer | number;
        to: string | Buffer;
        value: string | Buffer | number;
        data: string | Buffer;
        chainId: number;
    }): Promise<string>;
    signMessage(message: string): Promise<string>;
    toString(): string;
    toV3(pw: string, { salt, iv, uuid, kdf, cipher, dklen, c, n, r, p, }?: {
        salt?: Buffer;
        iv?: Buffer;
        uuid?: Buffer;
        kdf?: string;
        cipher?: string;
        dklen?: number;
        c?: number;
        n?: number;
        r?: number;
        p?: number;
    }): Promise<string>;
    getKeyStoreFileName(date?: Date): string;
    private toAddress;
}
