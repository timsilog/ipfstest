"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var hw_app_eth_1 = require("@ledgerhq/hw-app-eth");
var ethereumjs_util_1 = require("ethereumjs-util");
var rlp_1 = require("rlp");
var LedgerDPath;
(function (LedgerDPath) {
    LedgerDPath.testNet = "m/44'/1'/0'/";
    LedgerDPath.ethClassic = "m/44'/61'/0'/";
    LedgerDPath.mainNet = "m/44'/60'/0'/";
    function isValid(v) {
        return /^(?:m\/)?44'\/(?:1|60|61])'\/0'\/$/.test(v);
    }
    LedgerDPath.isValid = isValid;
})(LedgerDPath || (LedgerDPath = {}));
var Ledger = (function () {
    function Ledger(dPath, defaultIndex) {
        if (dPath === void 0) { dPath = Ledger.dPath.mainNet; }
        if (defaultIndex === void 0) { defaultIndex = 0; }
        this.dPath = dPath;
        this.defaultIndex = defaultIndex;
        this.getAddressLookup = {};
        if (!LedgerDPath.isValid(dPath)) {
            throw new TypeError("dPath<" + dPath + "> is invalid");
        }
    }
    Ledger.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var transport;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!Ledger.allowParallel && Ledger.initialized) {
                            throw new Error('another ledger wallet call is already initialized');
                        }
                        Ledger.initialized = true;
                        return [4, Ledger.Transport.create()];
                    case 1:
                        transport = _a.sent();
                        return [2, {
                                app: new hw_app_eth_1.default(transport),
                                close: function () {
                                    Ledger.initialized = false;
                                    transport.close();
                                },
                            }];
                }
            });
        });
    };
    Ledger.prototype.account = function (index) {
        if (index === void 0) { index = this.defaultIndex; }
        return this.getAddress(index).then(function (_a) {
            var address = _a.address;
            return address;
        });
    };
    Ledger.prototype.publicKey = function (index) {
        if (index === void 0) { index = this.defaultIndex; }
        return this.getAddress(index).then(function (_a) {
            var publicKey = _a.publicKey;
            return publicKey;
        });
    };
    Ledger.prototype.signTransaction = function (_a, index) {
        var _b = _a.nonce, nonce = _b === void 0 ? '0x' : _b, _c = _a.gasPrice, gasPrice = _c === void 0 ? '0x1' : _c, _d = _a.gas, gas = _d === void 0 ? '0x5208' : _d, _e = _a.to, to = _e === void 0 ? '0x' : _e, _f = _a.value, value = _f === void 0 ? '0x' : _f, _g = _a.data, data = _g === void 0 ? '0x' : _g;
        if (index === void 0) { index = this.defaultIndex; }
        return __awaiter(this, void 0, void 0, function () {
            var _h, app, close, chainId, raw, sig;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0: return [4, this.initialize()];
                    case 1:
                        _h = _j.sent(), app = _h.app, close = _h.close;
                        _j.label = 2;
                    case 2:
                        _j.trys.push([2, , 4, 5]);
                        chainId = this.dPath === LedgerDPath.mainNet ? 1 : 3;
                        raw = [
                            ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(nonce)),
                            ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(gasPrice)),
                            ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(gas)),
                            ethereumjs_util_1.toBuffer(to),
                            ethereumjs_util_1.stripZeros(ethereumjs_util_1.toBuffer(value)),
                            ethereumjs_util_1.toBuffer(data),
                        ];
                        return [4, app.signTransaction(this.dPath + index, rlp_1.encode(raw.concat(chainId > 0
                                ? [Buffer.from([chainId]), Buffer.from([]), Buffer.from([])]
                                : [])))];
                    case 3:
                        sig = _j.sent();
                        if (Math.floor((+('0x' + sig.v) - 35) / 2) !== (chainId & 0xff)) {
                            throw new Error('invalid signed chainId');
                        }
                        return [2, "0x" + rlp_1.encode(raw.concat(Buffer.from(sig.v, 'hex'), Buffer.from(sig.r, 'hex'), Buffer.from(sig.s, 'hex'))).toString('hex')];
                    case 4:
                        close();
                        return [7];
                    case 5: return [2];
                }
            });
        });
    };
    Ledger.prototype.signMessage = function (msg, index) {
        if (index === void 0) { index = this.defaultIndex; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, app, close, sig;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.initialize()];
                    case 1:
                        _a = _b.sent(), app = _a.app, close = _a.close;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, , 4, 5]);
                        return [4, app.signPersonalMessage(this.dPath + index, Buffer.from(msg).toString('hex'))];
                    case 3:
                        sig = _b.sent();
                        return [2, "0x" + sig.r + sig.s + Buffer.from([sig.v]).toString('hex')];
                    case 4:
                        close();
                        return [7];
                    case 5: return [2];
                }
            });
        });
    };
    Ledger.prototype.getAddress = function (index) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, app, close, resp;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.initialize()];
                    case 1:
                        _a = _b.sent(), app = _a.app, close = _a.close;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, , 4, 5]);
                        if (this.getAddressLookup[index]) {
                            return [2, this.getAddressLookup[index]];
                        }
                        return [4, app.getAddress(this.dPath + index)];
                    case 3:
                        resp = _b.sent();
                        this.getAddressLookup[index] = resp;
                        return [2, resp];
                    case 4:
                        close();
                        return [7];
                    case 5: return [2];
                }
            });
        });
    };
    Ledger.dPath = __assign({}, LedgerDPath);
    Ledger.initialized = false;
    Ledger.allowParallel = false;
    return Ledger;
}());
exports.Ledger = Ledger;
