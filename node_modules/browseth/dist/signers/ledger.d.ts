/// <reference types="node" />
import AppEth from '@ledgerhq/hw-app-eth';
import HWTransport from '@ledgerhq/hw-transport';
import { Signer } from './types';
export declare class Ledger implements Signer {
    private dPath;
    defaultIndex: number;
    static Transport: {
        create(): Promise<HWTransport>;
    };
    static dPath: {
        isValid(v: string): boolean;
        testNet: "m/44'/1'/0'/";
        ethClassic: "m/44'/61'/0'/";
        mainNet: "m/44'/60'/0'/";
    };
    private static initialized;
    private static allowParallel;
    getAddressLookup: {
        [index: number]: {
            address: string;
            publicKey: string;
        };
    };
    constructor(dPath?: string, defaultIndex?: number);
    initialize(): Promise<{
        app: AppEth;
        close(): void;
    }>;
    account(index?: number): Promise<string>;
    publicKey(index?: number): Promise<string>;
    signTransaction({ nonce, gasPrice, gas, to, value, data, }: {
        nonce: string | Buffer | number;
        gasPrice: string | Buffer | number;
        gas: string | Buffer | number;
        to: string | Buffer;
        value: string | Buffer | number;
        data: string | Buffer;
    }, index?: number): Promise<string>;
    signMessage(msg: string, index?: number): Promise<string>;
    private getAddress;
}
