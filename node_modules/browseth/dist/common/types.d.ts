export interface ToStringable {
    toString(): string;
}
export declare type MaybePromise<T> = T | Promise<T>;
export declare type Fallback<T> = T | (() => MaybePromise<T>);
export declare function evalFallback<T>(v: T | undefined, fallback: Fallback<T>): Promise<T>;
export declare type Data = string | ArrayBuffer | ArrayBufferView | ToStringable;
export declare type Quantity = number | string | ToStringable;
export declare type Block = Quantity;
export declare type Tag = Quantity;
export declare type ChainId = Quantity;
export declare type Unit = 'wei' | 'kwei' | 'ada' | 'femtoether' | 'mwei' | 'babbage' | 'picoether' | 'gwei' | 'shannon' | 'nanoether' | 'nano' | 'szabo' | 'microether' | 'micro' | 'finney' | 'milliether' | 'milli' | 'ether' | 'kether' | 'grand' | 'einstein' | 'mether' | 'gether' | 'tether';
export interface Transaction {
    to?: Data;
    value?: Quantity;
    data?: Data;
    UNSAFE_gas?: Quantity;
    UNSAFE_gasPrice?: Quantity;
    UNSAFE_nonce?: Quantity;
    UNSAFE_chainId?: ChainId;
}
export interface RawRequest {
    url: string;
    body: string;
    headers: Array<[string, string | string[]]>;
    timeout: number;
    [key: string]: any;
}
export declare namespace Eth {
    interface Log {
        removed: boolean;
        logIndex: number;
        transactionIndex: number;
        transactionHash: string;
        blockHash: string;
        blockNumber: number;
        address: string;
        data: string;
        topics: string[];
    }
    interface TransactionReceipt {
        transactionHash: string;
        transactionIndex: number;
        blockHash: string;
        blockNumber: number;
        cumulativeGasUsed: number;
        gasUsed: number;
        contractAddress: string;
        logs: Log[];
        logsBloom: string;
    }
    interface TransactionObject {
        hash: string;
        nonce: number;
        blockHash: string;
        blockNumber: number;
        transactionIndex: number;
        from: string;
        to: string;
        value: number;
        gasPrice: number;
        gas: number;
        input: string;
    }
    interface BlockObject<Full extends boolean = true> {
        number: number;
        hash: string;
        parentHash: string;
        nonce: string;
        sha3Uncles: string;
        logsBloom: string;
        transactionsRoot: string;
        stateRoot: string;
        receiptsRoot: string;
        miner: string;
        difficulty: number;
        totalDifficulty: number;
        extraData: string;
        size: number;
        gasLimit: number;
        gasUsed: number;
        timestamp: number;
        transactions: Full extends true ? TransactionObject[] : string[];
        uncles: string[];
    }
    interface SyncStatus {
        startingBlock: number;
        currentBlock: number;
        highestBlock: number;
    }
}
