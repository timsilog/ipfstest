"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require("babel-runtime/core-js/set");

var _set2 = _interopRequireDefault(_set);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _events = require("events");

var _events2 = _interopRequireDefault(_events);

var _getDevices = require("./getDevices");

var _getDevices2 = _interopRequireDefault(_getDevices);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;

  var events = new _events2.default();
  events.setMaxListeners(0);

  var timeoutDetection = void 0;
  var listDevices = (0, _getDevices2.default)();

  var flatDevice = function flatDevice(d) {
    return d.path;
  };

  var getFlatDevices = function getFlatDevices() {
    return [].concat((0, _toConsumableArray3.default)(new _set2.default((0, _getDevices2.default)().map(function (d) {
      return flatDevice(d);
    }))));
  };

  var getDeviceByPaths = function getDeviceByPaths(paths) {
    return listDevices.find(function (d) {
      return paths.includes(flatDevice(d));
    });
  };

  var lastDevices = getFlatDevices();

  var checkDevices = function checkDevices() {
    timeoutDetection = setTimeout(function () {
      var currentDevices = getFlatDevices();

      var newDevices = currentDevices.filter(function (d) {
        return !lastDevices.includes(d);
      });
      var removeDevices = lastDevices.filter(function (d) {
        return !currentDevices.includes(d);
      });

      if (newDevices.length > 0) {
        listDevices = (0, _getDevices2.default)();
        events.emit("add", getDeviceByPaths(newDevices));
      }

      if (removeDevices.length > 0) {
        events.emit("remove", getDeviceByPaths(removeDevices));
        listDevices = listDevices.filter(function (d) {
          return !removeDevices.includes(flatDevice(d));
        });
      }

      lastDevices = currentDevices;

      checkDevices();
    }, delay);
  };

  checkDevices();

  return {
    stop: function stop() {
      clearTimeout(timeoutDetection);
    },
    events: events
  };
};
//# sourceMappingURL=listenDevices.js.map