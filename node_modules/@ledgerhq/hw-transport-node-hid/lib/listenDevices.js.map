{"version":3,"sources":["../src/listenDevices.js"],"names":["delay","events","setMaxListeners","timeoutDetection","listDevices","flatDevice","d","path","getFlatDevices","map","getDeviceByPaths","find","paths","includes","lastDevices","checkDevices","setTimeout","currentDevices","newDevices","filter","removeDevices","length","emit","stop","clearTimeout"],"mappings":";;;;;;;;;;;;;;AAEA;;;;AACA;;;;;;kBAEe,YAKV;AAAA,MAJHA,KAIG,uEAJa,GAIb;;AACH,MAAMC,SAAS,sBAAf;AACAA,SAAOC,eAAP,CAAuB,CAAvB;;AAEA,MAAIC,yBAAJ;AACA,MAAIC,cAAc,2BAAlB;;AAEA,MAAMC,aAAa,SAAbA,UAAa;AAAA,WAAKC,EAAEC,IAAP;AAAA,GAAnB;;AAEA,MAAMC,iBAAiB,SAAjBA,cAAiB;AAAA,sDAClB,kBAAQ,4BAAaC,GAAb,CAAiB;AAAA,aAAKJ,WAAWC,CAAX,CAAL;AAAA,KAAjB,CAAR,CADkB;AAAA,GAAvB;;AAIA,MAAMI,mBAAmB,SAAnBA,gBAAmB;AAAA,WACvBN,YAAYO,IAAZ,CAAiB;AAAA,aAAKC,MAAMC,QAAN,CAAeR,WAAWC,CAAX,CAAf,CAAL;AAAA,KAAjB,CADuB;AAAA,GAAzB;;AAGA,MAAIQ,cAAcN,gBAAlB;;AAEA,MAAMO,eAAe,SAAfA,YAAe,GAAM;AACzBZ,uBAAmBa,WAAW,YAAM;AAClC,UAAMC,iBAAiBT,gBAAvB;;AAEA,UAAMU,aAAaD,eAAeE,MAAf,CAAsB;AAAA,eAAK,CAACL,YAAYD,QAAZ,CAAqBP,CAArB,CAAN;AAAA,OAAtB,CAAnB;AACA,UAAMc,gBAAgBN,YAAYK,MAAZ,CACpB;AAAA,eAAK,CAACF,eAAeJ,QAAf,CAAwBP,CAAxB,CAAN;AAAA,OADoB,CAAtB;;AAIA,UAAIY,WAAWG,MAAX,GAAoB,CAAxB,EAA2B;AACzBjB,sBAAc,2BAAd;AACAH,eAAOqB,IAAP,CAAY,KAAZ,EAAmBZ,iBAAiBQ,UAAjB,CAAnB;AACD;;AAED,UAAIE,cAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC5BpB,eAAOqB,IAAP,CAAY,QAAZ,EAAsBZ,iBAAiBU,aAAjB,CAAtB;AACAhB,sBAAcA,YAAYe,MAAZ,CACZ;AAAA,iBAAK,CAACC,cAAcP,QAAd,CAAuBR,WAAWC,CAAX,CAAvB,CAAN;AAAA,SADY,CAAd;AAGD;;AAEDQ,oBAAcG,cAAd;;AAEAF;AACD,KAvBkB,EAuBhBf,KAvBgB,CAAnB;AAwBD,GAzBD;;AA2BAe;;AAEA,SAAO;AACLQ,UAAM,gBAAM;AACVC,mBAAarB,gBAAb;AACD,KAHI;AAILF;AAJK,GAAP;AAMD,C","file":"listenDevices.js","sourcesContent":["// @flow\n\nimport EventEmitter from \"events\";\nimport getDevices from \"./getDevices\";\n\nexport default (\n  delay: number = 100\n): {\n  events: EventEmitter,\n  stop: () => void\n} => {\n  const events = new EventEmitter();\n  events.setMaxListeners(0);\n\n  let timeoutDetection;\n  let listDevices = getDevices();\n\n  const flatDevice = d => d.path;\n\n  const getFlatDevices = () => [\n    ...new Set(getDevices().map(d => flatDevice(d)))\n  ];\n\n  const getDeviceByPaths = paths =>\n    listDevices.find(d => paths.includes(flatDevice(d)));\n\n  let lastDevices = getFlatDevices();\n\n  const checkDevices = () => {\n    timeoutDetection = setTimeout(() => {\n      const currentDevices = getFlatDevices();\n\n      const newDevices = currentDevices.filter(d => !lastDevices.includes(d));\n      const removeDevices = lastDevices.filter(\n        d => !currentDevices.includes(d)\n      );\n\n      if (newDevices.length > 0) {\n        listDevices = getDevices();\n        events.emit(\"add\", getDeviceByPaths(newDevices));\n      }\n\n      if (removeDevices.length > 0) {\n        events.emit(\"remove\", getDeviceByPaths(removeDevices));\n        listDevices = listDevices.filter(\n          d => !removeDevices.includes(flatDevice(d))\n        );\n      }\n\n      lastDevices = currentDevices;\n\n      checkDevices();\n    }, delay);\n  };\n\n  checkDevices();\n\n  return {\n    stop: () => {\n      clearTimeout(timeoutDetection);\n    },\n    events\n  };\n};\n"]}